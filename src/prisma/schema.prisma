// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model Users {
  id                     Int          @id @default(autoincrement())
  firstName              String
  lastName               String
  username               String       @unique
  email                  String       @unique
  password               String
  sentFriendRequests     Friends[]    @relation("SentFriendRequests")
  receivedFriendRequests Friends[]    @relation("ReceivedFriendRequests")
  notes                  Notes[]      @relation("UserCreatedNote")
  reminders              Reminders[]  @relation("UserCreatedReminder")
  shortLinks             ShortLinks[] @relation("UserCreatedNoteShortLink")
  sentSharings           Sharings[]   @relation("UserSentSharings")
  receivedSharings       Sharings[]   @relation("UserReceivedSharings")
}

model Friends {
  id         Int    @id @default(autoincrement())
  senderId   Int
  receiverId Int
  status     String @default("pending")
  sender     Users  @relation("SentFriendRequests", fields: [senderId], references: [id])
  receiver   Users  @relation("ReceivedFriendRequests", fields: [receiverId], references: [id])

  @@unique([senderId, receiverId])
}

model Notes {
  id        Int         @id @default(autoincrement())
  userId    Int
  title     String
  content   String
  render    String
  createAt  DateTime    @default(now())
  updateAt  DateTime    @default(now())
  user      Users       @relation("UserCreatedNote", fields: [userId], references: [id])
  reminder  Reminders?  @relation("NoteHasReminder")
  sharings  Sharings[]  @relation("NoteSharings")
  shortLink ShortLinks? @relation("NoteHaveShortLink")
}

model Sharings {
  id           Int      @id @default(autoincrement())
  userId       Int
  sharedUserId Int
  noteId       Int
  user         Users    @relation("UserSentSharings", fields: [userId], references: [id])
  sharedUser   Users    @relation("UserReceivedSharings", fields: [sharedUserId], references: [id])
  note         Notes    @relation("NoteSharings", fields: [noteId], references: [id])

  @@unique(fields: [userId, sharedUserId, noteId])
}

model Reminders {
  id     Int      @id @default(autoincrement())
  noteId Int      @unique
  userId Int
  note   Notes    @relation("NoteHasReminder", fields: [noteId], references: [id])
  user   Users    @relation("UserCreatedReminder", fields: [userId], references: [id])
  expire DateTime
}

model ShortLinks {
  id     Int    @id @default(autoincrement())
  code   String @unique
  userId Int
  noteId Int    @unique
  user   Users  @relation("UserCreatedNoteShortLink", fields: [userId], references: [id])
  note   Notes  @relation("NoteHaveShortLink", fields: [noteId], references: [id])
}
